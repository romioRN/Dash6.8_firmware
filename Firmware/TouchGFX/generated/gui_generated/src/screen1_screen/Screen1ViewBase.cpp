/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 1280, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    gauge2.setBackground(touchgfx::Bitmap(BITMAP_TEMP_ID));
    gauge2.setPosition(722, 0, 558, 479);
    gauge2.setCenter(259.2f, 240.0f);
    gauge2.setStartEndAngle(146, 33);
    gauge2.setRange(40, 130);
    gauge2.setValue(40);
    gauge2.setNeedle(BITMAP_VECTOR_8_ID, 7, 270);
    gauge2.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge2.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge2.setArcVisible();
    gauge2Painter.setColor(touchgfx::Color::getColorFromRGB(30, 96, 117));
    gauge2.getArc().setPainter(gauge2Painter);
    gauge2.getArc().setRadius(257);
    gauge2.getArc().setLineWidth(35);
    gauge2.getArc().setCapPrecision(10);
    gauge2.setArcPosition(0, 0, 546.6f, 479.0f);
    add(gauge2);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_FUEL_ID));
    gauge1.setBackgroundOffset(14.6f, 0.0f);
    gauge1.setPosition(7, 0, 416, 480);
    gauge1.setCenter(290, 240);
    gauge1.setStartEndAngle(-145.8f, -33.0f);
    gauge1.setRange(0, 100);
    gauge1.setValue(0);
    gauge1.setNeedle(BITMAP_VECTOR_8_ID, 7.6f, 270.0f);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setArcVisible();
    gauge1Painter.setColor(touchgfx::Color::getColorFromRGB(30, 96, 117));
    gauge1.getArc().setPainter(gauge1Painter);
    gauge1.getArc().setRadius(257);
    gauge1.getArc().setLineWidth(35);
    gauge1.getArc().setCapPrecision(10);
    gauge1.setArcPosition(0, 0, 448, 479);
    add(gauge1);

    image5.setXY(107, 1);
    image5.setBitmap(touchgfx::Bitmap(BITMAP_FRAME_69_ID));
    add(image5);

    indOil.setXY(736, 9);
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_OIL_ID));
    add(indOil);

    indBatt.setXY(598, 9);
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_BATTERYBLOCK_ID));
    add(indBatt);

    indDTC.setXY(458, 8);
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_CHEK_ID));
    add(indDTC);

    indECT_blue.setXY(973, 359);
    indECT_blue.setBitmap(touchgfx::Bitmap(BITMAP_WATER_TEMP_BLUE_ID));
    indECT_blue.setVisible(false);
    add(indECT_blue);

    indECT.setXY(973, 359);
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_WATER_TEMP_RED_ID));
    indECT.setVisible(false);
    add(indECT);

    indFuel.setXY(254, 358);
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_FUIL_LLOV_ID));
    indFuel.setVisible(false);
    add(indFuel);

    speed.setXY(593, 88);
    speed.setColor(touchgfx::Color::getColorFromRGB(193, 198, 199));
    speed.setLinespacing(0);
    Unicode::snprintf(speedBuffer, SPEED_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_II6I).getText());
    speed.setWildcard(speedBuffer);
    speed.resizeToCurrentText();
    speed.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X3Y5));
    add(speed);

    value_3.setXY(256, 263);
    value_3.setColor(touchgfx::Color::getColorFromRGB(193, 198, 199));
    value_3.setLinespacing(0);
    Unicode::snprintf(value_3Buffer, VALUE_3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L83R).getText());
    value_3.setWildcard(value_3Buffer);
    value_3.resizeToCurrentText();
    value_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RDWZ));
    add(value_3);

    value_2.setXY(993, 263);
    value_2.setColor(touchgfx::Color::getColorFromRGB(193, 198, 199));
    value_2.setLinespacing(0);
    Unicode::snprintf(value_2Buffer, VALUE_2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OVOH).getText());
    value_2.setWildcard(value_2Buffer);
    value_2.resizeToCurrentText();
    value_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NBH4));
    add(value_2);

    value_5.setXY(554, 402);
    value_5.setColor(touchgfx::Color::getColorFromRGB(33, 43, 49));
    value_5.setLinespacing(0);
    Unicode::snprintf(value_5Buffer, VALUE_5_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2OQK).getText());
    value_5.setWildcard(value_5Buffer);
    value_5.resizeToCurrentText();
    value_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A2XU));
    add(value_5);

    value_1.setXY(757, 403);
    value_1.setColor(touchgfx::Color::getColorFromRGB(33, 43, 49));
    value_1.setLinespacing(0);
    Unicode::snprintf(value_1Buffer, VALUE_1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_5SH3).getText());
    value_1.setWildcard(value_1Buffer);
    value_1.resizeToCurrentText();
    value_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T4SB));
    add(value_1);

    value_0.setXY(593, 281);
    value_0.setColor(touchgfx::Color::getColorFromRGB(193, 198, 199));
    value_0.setLinespacing(0);
    Unicode::snprintf(value_0Buffer, VALUE_0_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PK4E).getText());
    value_0.setWildcard(value_0Buffer);
    value_0.resizeToCurrentText();
    value_0.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LKJO));
    add(value_0);

    changeBacklight1.setXY(1186, 394);
    changeBacklight1.setBitmaps(touchgfx::Bitmap(BITMAP_RESHOT_ICON_LIGHT_MAX_SKL25EYVD9_1_ID), touchgfx::Bitmap(BITMAP_RESHOT_ICON_LIGHT_MAX_SKL25EYVD9_1_ID));
    changeBacklight1.setAction(buttonCallback);
    add(changeBacklight1);
}

Screen1ViewBase::~Screen1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &changeBacklight1)
    {
        //Interaction1
        //When changeBacklight1 clicked call virtual function
        //Call changeBacklight
        changeBacklight();
    }
}
